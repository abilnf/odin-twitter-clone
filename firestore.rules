rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId
                      && request.resource.data.at is string
                      && request.resource.data.at.size() <= 30
                      && request.resource.data.name is string
                      && request.resource.data.name.size() <= 30
                      && request.resource.data.avatar is string
                      && request.resource.data.avatar.matches('https?://.*')
                      && request.resource.data.keys().hasOnly(['at', 'name', 'avatar']);
    }
    match /tweets/{tweetId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
                      && request.resource.data.time is timestamp
                      && request.resource.data.text is string
                      && request.resource.data.text.size() <= 280
                      && request.resource.data.uid == request.auth.uid
                      && request.resource.data.keys().hasOnly(['time', 'text', 'uid']);
      allow update: if request.auth != null
                 && get(/databases/$(database)/documents/tweets/$(tweetId)).data.uid == request.auth.uid
                 && request.resource.data.imageUrl is string
                 && request.resource.data.imageUrl.matches('https?://.*') 
                 && request.resource.data.imageStoragePath is string
                 && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['imageUrl', 'imageStoragePath']);
      allow delete: if request.auth != null && 
              get(/databases/$(database)/documents/tweets/$(tweetId)).data.uid == request.auth.uid
    }
  }
}